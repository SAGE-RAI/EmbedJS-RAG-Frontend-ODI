<sidebar class="conversations-sidebar">
    <nav>
        <h2>Chat bot</h2>
        <select id="instanceSelect" onchange="switchInstance()">
            <!-- Populate this select with the user's RAG instances -->
        </select>
        <h2>Conversations</h2>
        <button onclick="javascript:loadConversation('')">New Conversation</button>
        <div class="conversations">
        </div>
    </nav>
</sidebar>


<script>
    function updateConversations() {
        const instanceId = '<%= activeInstance ? activeInstance._id : "" %>';
        fetch(`/instances/${instanceId}/conversations`, {
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(conversations => {
            try {
                const conversationsContainer = document.querySelector('.conversations');
                conversationsContainer.innerHTML = "";

                // Group conversations by date categories
                const categorizedConversations = categorizeConversations(conversations);

                // Iterate over categorized conversations and render them
                Object.keys(categorizedConversations).forEach(category => {
                    // Create a new div for each category
                    const categoryDiv = document.createElement('div');
                    categoryDiv.classList.add('category');

                    // Add a header for the category
                    const categoryHeader = document.createElement('h3');
                    categoryHeader.textContent = category;
                    categoryDiv.appendChild(categoryHeader);

                    // Create a list for the current category
                    const categoryList = document.createElement('ul');
                    categoryList.classList.add('category-list');

                    if (categorizedConversations[category].length > 0) {
                        categorizedConversations[category].forEach(conversation => {
                            const conversationItem = document.createElement('li');

                            // Create conversation link
                            const conversationLink = document.createElement('a');
                            conversationLink.textContent = conversation.title ? conversation.title : getTitle(conversation.entries[0].content.message);
                            conversationLink.href = `javascript:loadConversation('${conversation._id}')`;
                            conversationLink.classList.add('conversation');

                            // Create a container for the link and menu
                            const conversationContainer = document.createElement('div');
                            conversationContainer.classList.add('conversation-container');
                            conversationContainer.appendChild(conversationLink);

                            // Create menu button (three dots)
                            const menuButton = document.createElement('button');
                            menuButton.classList.add('menu-button');

                            // Create the icon span and set its content
                            const menuIcon = document.createElement('span');
                            menuIcon.classList.add('menu-icon');
                            menuIcon.innerHTML = '&#x22EE;'; // Vertical ellipsis (three dots)

                            // Append the icon to the button
                            menuButton.appendChild(menuIcon);

                            // Add click event listener to the button
                            menuButton.onclick = (event) => {
                                event.stopPropagation();
                                closeAllMenus();
                                toggleMenu(menuButton);
                            };

                            // Create the menu
                            const menu = document.createElement('div');
                            menu.classList.add('menu');

                            // Rename option
                            const renameOption = document.createElement('div');
                            renameOption.classList.add('menu-option');
                            renameOption.textContent = 'Rename';
                            renameOption.onclick = () => {
                                closeAllMenus();
                                renameConversation(conversationItem, conversation._id);
                            };
                            menu.appendChild(renameOption);

                            // Delete option
                            const deleteOption = document.createElement('div');
                            deleteOption.classList.add('menu-option');
                            deleteOption.textContent = 'Delete';
                            deleteOption.onclick = () => {
                                closeAllMenus();
                                deleteConversation(conversation._id);
                            };
                            menu.appendChild(deleteOption);

                            // Append menu to button and button to container
                            conversationContainer.appendChild(menuButton);
                            conversationContainer.appendChild(menu);

                            // Append the container to the list item
                            conversationItem.appendChild(conversationContainer);

                            // Append conversation item to the list
                            categoryList.appendChild(conversationItem);
                        });
                    }

                    // Append the category list to the category div
                    categoryDiv.appendChild(categoryList);

                    // Append the category div to the conversations container
                    conversationsContainer.appendChild(categoryDiv);
                });
            } catch (err) {
                console.error('Error updating conversations:', err);
            }
        })
        .catch(error => {
            console.error('Error fetching conversations:', error);
        });
    }

    document.addEventListener('click', (event) => {
        const menus = document.querySelectorAll('.menu');
        menus.forEach(menu => {
            if (!menu.contains(event.target) && !menu.previousElementSibling.contains(event.target)) {
                menu.classList.remove('show');
            }
        });
    });

    function toggleMenu(button) {
        const menu = button.nextElementSibling;
        menu.classList.toggle('show');
    }

    function closeAllMenus() {
        const menus = document.querySelectorAll('.menu');
        menus.forEach(menu => {
            menu.classList.remove('show');
        });
    }

    function renameConversation(conversationItem, conversationId) {
        const conversationLink = conversationItem.querySelector('.conversation');
        conversationLink.contentEditable = true;
        conversationLink.focus();
        const range = document.createRange();
        range.selectNodeContents(conversationLink);
        const sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
        conversationLink.onblur = () => {
            conversationLink.contentEditable = false;
            saveConversationTitle(conversationId, conversationLink.textContent);
        };
    }

    function saveConversationTitle(conversationId, newTitle) {
        const instanceId = '<%= activeInstance ? activeInstance._id : "" %>';
        fetch(`/instances/${instanceId}/conversations/${conversationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title: newTitle })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Title updated successfully:', data);
        })
        .catch(error => {
            console.error('Error updating title:', error);
        });
    }

    // Function to delete a conversation by its ID
    function deleteConversation(conversationId) {
        if (confirm("Are you sure you want to delete this conversation?")) {
            const instanceId = '<%= activeInstance ? activeInstance._id : "" %>';
            fetch(`/instances/${instanceId}/conversations/${conversationId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    // Reload conversations after deletion
                    updateConversations();
                    // Extract the conversationId from the URL path
                    const pathParts = window.location.pathname.split('/');
                    const currentInstanceId = pathParts[2];
                    const currentConversationId = pathParts[4];

                    // If the deleted conversationId is the one currently viewed, reload the conversation view
                    if (currentConversationId === conversationId) {
                        loadConversation('');
                    }
                } else {
                    throw new Error('Failed to delete conversation');
                }
            })
            .catch(error => {
                console.error('Error deleting conversation:', error);
            });
        }
    }

    // Function to categorize conversations based on the date of the last message
    function categorizeConversations(conversations) {
        const categorized = {
            Today: [],
            Yesterday: [],
            'Previous 7 days': [],
            'Previous 30 days': [],
            Months: {}
        };

        // Iterate over conversations and categorize them
        conversations.forEach(conversation => {
            const lastMessageDate = new Date(conversation.entries[conversation.entries.length - 1].timestamp);
            const currentDate = new Date();
            const timeDiff = currentDate.getTime() - lastMessageDate.getTime();
            const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

            if (daysDiff === 1) {
                categorized.Today.push(conversation);
            } else if (daysDiff === 2) {
                categorized.Yesterday.push(conversation);
            } else if (daysDiff <= 8) {
                categorized['Previous 7 days'].push(conversation);
            } else if (daysDiff <= 31) {
                categorized['Previous 30 days'].push(conversation);
            } else {
                const monthYear = lastMessageDate.toLocaleString('default', { month: 'long', year: 'numeric' });
                if (!categorized.Months[monthYear]) {
                    categorized.Months[monthYear] = [];
                }
                categorized.Months[monthYear].push(conversation);
            }
        });

        return categorized;
    }

    function getTitle(text) {
        const words = text.split(' '); // Split the text into words
        let title = ''; // Initialize the title string

        // Iterate through the words to find the nearest complete set of words that are at least 24 characters long
        for (let i = 0; i < words.length; i++) {
            title += words[i] + ' '; // Add the current word to the title

            // Check if the title length is at least 24 characters
            if (title.length >= 24) {
                // If the title length is already at least 24 characters, return the title
                return title.trim(); // Trim any extra whitespace
            }
        }

        // If the loop completes without finding a title of at least 24 characters, return the entire text
        return text;
    }

    // Call the initial updateConversations to populate the conversations
    updateConversations();

    // Set up polling interval to update conversations every 5 seconds
    //setInterval(updateConversations, 5000);

</script>