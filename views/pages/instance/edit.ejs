<!-- views/edit.ejs -->
<%- include('../../partials/header') %>
<style>
    .longText {
        min-width: 80%;
    }
    .submit {
        margin-top: 2em;
    }
</style>
<div class="padded">
<h1>Edit Instance</h1>
<div id="res" class="alert"></div>
<form id="dataForm"></form>
</div>

<script>
    const instanceId = "<%= instanceId %>";

    $(document).ready(function () {
        // Fetch the instance data
        fetch(`/instances/${instanceId}`, {
            headers: {
                'Accept': 'application/json'
            }
        })
        .then(response => response.json())
        .then(instance => {

            // Fetch the schema
            fetch('/schemas/ragInstance.json')
                .then(response => response.json())
                .then(schema => {
                    // Render the form with the fetched instance data
                    $('#dataForm').jsonForm({
                        schema: schema.schema,
                        form: schema.form,
                        value: instance,
                        onSubmit: function (errors, values) {
                            if (errors) {
                                $('#res').html('<p>Please correct the errors in your form</p>');
                            } else {
                                updateInstance(values);
                            }
                        }
                    });
                    // After the form has been loaded, add the event listener for provider change
                    const providerField = $('select[name="model.provider"]');
                    const baseUrlField = $('input[name="model.baseUrl"]');
                    const nameField = $('input[name="model.name"]');

                    // Initially disable the Base URL field
                    baseUrlField.prop('disabled', true);

                    selectedProvider = providerField.val();
                    if (selectedProvider === 'Azure' || selectedProvider === 'Ollama' || selectedProvider === 'OpenAI') {
                            baseUrlField.prop('disabled', false);
                    }

                    // Add change event listener to provider field
                    providerField.change(function () {
                        nameField.prop('disabled', false);
                        const selectedProvider = $(this).val();
                        if (selectedProvider === 'Azure' || selectedProvider === 'Ollama' || selectedProvider === 'OpenAI') {
                            baseUrlField.prop('disabled', false);
                            if (selectedProvider === 'Azure') {
                                nameField.prop('disabled', true).val('');
                            }
                        } else {
                            baseUrlField.prop('disabled', true).val(''); // Disable and clear value
                            nameField.prop('disabled', false);
                        }
                    });

                    const embedProviderField = $('select[name="embedModel.provider"]');
                    const embedBaseUrlField = $('input[name="embedModel.baseUrl"]');
                    const embedNameField = $('input[name="embedModel.name"]');
                    const embedDimensionsField = $('input[name="embedModel.dimensions"]');

                    // Initially disable the Base URL field
                    embedBaseUrlField.prop('disabled', true);

                    // Check the count of sources
                    fetch(`/instances/${instanceId}/sources/count`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.count > 0) {
                            // Disable all editing of the embedProvider fields
                            $('select[name="embedModel.provider"]').prop('disabled', true);
                            $('input[name="embedModel.baseUrl"]').prop('disabled', true);
                            $('input[name="embedModel.name"]').prop('disabled', true);
                            $('input[name="embedModel.dimensions"]').prop('disabled', true);
                        } else {

                            selectedEmbedProvider = embedProviderField.val();
                            selectedEmbedName = embedNameField.val();
                            if (selectedEmbedProvider !== 'OpenAI') {
                                embedBaseUrlField.prop('disabled', true);
                                embedNameField.prop('disabled', true).val('');
                                embedDimensionsField.prop('disabled', true);
                            }

                            // Add change event listener to provider field
                            embedProviderField.change(function () {
                                const selectedEmbedProvider = $(this).val();
                                if (selectedEmbedProvider !== 'OpenAI') {
                                    embedBaseUrlField.prop('disabled', true).val('');
                                    embedNameField.prop('disabled', true).val('');
                                    embedDimensionsField.prop('disabled', true);
                                } else {
                                    embedBaseUrlField.prop('disabled', false).val('');
                                    embedNameField.prop('disabled', false);
                                    embedDimensionsField.prop('disabled', false)
                                }
                            });

                            embedNameField.change(function () {
                                embedDimensionsField.prop('disabled', false);
                                if (selectedEmbedProvider === 'OpenAI') {
                                    const selectedEmbedName = $(this).val();
                                    if (selectedEmbedName === 'text-embedding-3-small' || selectedEmbedName === 'text-embedding-ada-002') {
                                        embedDimensionsField.prop('disabled', true);
                                    } else {
                                        embedDimensionsField.prop('disabled', false);
                                    }
                                } else {
                                    embedDimensionsField.prop('disabled', true);
                                }
                            });
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching schema:', error);
                    $('#res').html('<p>Error fetching schema.</p>');
                });
        })
        .catch(error => {
            console.error('Error fetching instance details:', error);
            $('#res').html('<p>Error fetching instance details.</p>');
        });
    });

    function updateInstance(values) {
        console.log(values);
        $('#res').html('<p>Updating, please wait...</p>');
        fetch(`/instances/${instanceId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(values)
        })
        .then(response => response.json())
        .then(data => {
            if (data._id) {
                $('#res').html('<p>Instance updated successfully.</p>');
            } else if (data.error) {
                $('#res').html('<p>Error: ' + data.error + '</p>');
            } else {
                $('#res').html('<p>Unknown error occurred</p>');
            }
        })
        .catch(error => {
            console.error('Error updating instance:', error);
            $('#res').html('<p>An error occurred while processing your request</p>');
        });
    }
</script>
<%- include('../../partials/footer') %>