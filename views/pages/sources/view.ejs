<%- include('../../partials/header') %>
<div class="padded">
    <style>
        /* Add your custom styles here */
    </style>

    <div style="text-align: center;">
        <div id="res" class="alert"></div>
    </div>
    <h1>Sources</h1>

    <% if (userCanEditSources) { %>
        <div style="text-align: center;">
            <a href="/instances/<%= instanceId %>/sources/add"><button>Add source</button></a>
            <a href="/instances/<%= instanceId %>/sources/import"><button>Bulk import</button></a>
        </div>
        <br/>
    <% } %>
    <div id="sitemapStatusContainer" style="display: none;">
        <h2>SiteMap Import Status</h2>
        <table id="sitemapStatusTable" class="display" style="width:100%"></table>
    </div>

    <h2>Sources (itemized)</h2>
    <p>The table below lists the sources of information that are used to try and answer queries. Each source is divided into <b>chunks</b> of text to make searching for concepts more optimized. The <b>tokens</b> is a rough indication of the size of the source.</p>
    <table id="sourcesTable" class="display" style="width:100%"></table>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.7.0/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.print.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.13.5/css/buttons.dataTables.min.css">

    <script>
        $(document).ready(function () {
            const instanceId = '<%= instanceId %>';
            const temp = '<%= userCanEditSources %>';
            let userCanEditSources = temp === "true";

            // Sources table configuration
            const sourcesTable = $('#sourcesTable').DataTable({
                ajax: {
                    url: '/instances/' + instanceId + '/sources',
                    dataSrc: '',
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Accept', 'application/json');
                    }
                },
                columns: [
                    { data: 'title', title: 'Title', defaultContent: '' },
                    {
                        data: null,
                        title: 'URL',
                        render: function(data, type, row) {
                            const url = row.overrideUrl ? row.overrideUrl : row.source;
                            return '<a href="' + url + '">' + url + '</a>';
                        }
                    },
                    { data: 'loadedDate', title: 'Loaded Date', render: formatDate },
                    { data: 'chunkCount', title: 'Chunks', width: '5%' },
                    { data: 'tokens', title: 'Tokens', width: '5%' },
                    userCanEditSources ? {
                        title: 'Actions',
                        render: function (data, type, row) {
                            return `
                                <button class="editBtn" data-loaderid="${row.loaderId}">Edit</button>
                                <button class="deleteBtn" data-loaderid="${row.loaderId}">Delete</button>
                                <button class="reloadBtn" data-loaderid="${row.loaderId}">Reload</button>`;
                        }
                    } : null
                ].filter(column => column !== null),
                order: [[0, 'asc']],
                dom: 'frtipB',
                buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
            });

            // Event listeners for source actions
            setupSourceActions(instanceId, sourcesTable);

            // Sitemap status table configuration
            const sitemapStatusTable = $('#sitemapStatusTable').DataTable({
                ajax: {
                    url: '/instances/' + instanceId + '/sources/sitemap/status',
                    dataSrc: function (data) {
                        $('#sitemapStatusContainer').toggle(data.length > 0);
                        return data;
                    },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Accept', 'application/json');
                    }
                },
                columns: [
                    { data: 'siteMapUrl', title: 'SiteMap URL' },
                    { data: 'threadRunning', title: 'Thread Running', render: data => data ? 'Yes' : 'No' },
                    { data: 'totalUrls', title: 'Total URLs' },
                    { data: 'completedUrls', title: 'Completed URLs' },
                    { // New column with Update button
                        data: null,
                        title: 'Actions',
                        render: function (data, type, row) {
                            return `<button class="updateSitemapBtn" data-sitemapurl="${row.siteMapUrl}">Update</button>`;
                        }
                    }
                ],
                order: [[0, 'asc']],
                dom: 'frtipB',
                buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
            });

            // Event listener for update sitemap button
            $('#sitemapStatusTable').on('click', '.updateSitemapBtn', function () {
                const siteMapUrl = $(this).data('sitemapurl');
                $('#res').html('<p>Updating sitemap, please wait...</p>');

                fetch(`/instances/${instanceId}/sources/sitemap/update?url=${encodeURIComponent(siteMapUrl)}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    $('#res').html('<p>Sitemap updated successfully.</p>');
                    sitemapStatusTable.ajax.reload();
                    sourcesTable.ajax.reload();
                    setTimeout(() => $('#res').html(''), 5000);
                })
                .catch(error => {
                    console.error('Error updating sitemap:', error);
                    $('#res').html('<p>Error updating sitemap: ' + error.message + '</p>');
                    setTimeout(() => $('#res').html(''), 5000);
                });
            });
        });

        // Helper functions
        function formatDate(data) {
            const date = new Date(data);
            // Format as "YYYY-MM-DD HH:MM:SS"
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');
            return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
        }

        function setupSourceActions(instanceId, sourcesTable) {
            $('#sourcesTable').on('click', '.editBtn', function () {
                window.location.href = `/instances/${instanceId}/sources/${$(this).data('loaderid')}`;
            });

            $('#sourcesTable').on('click', '.deleteBtn', function () {
                const loaderId = $(this).data('loaderid');
                if (confirm('Are you sure you want to delete this source?')) {
                    deleteSource(loaderId, instanceId, sourcesTable);
                }
            });

            $('#sourcesTable').on('click', '.reloadBtn', function () {
                const loaderId = $(this).data('loaderid');
                reloadSource(loaderId, instanceId, sourcesTable);
            });
        }

        function deleteSource(loaderId, instanceId, sourcesTable) {
            $('#res').html('<p>Deleting, please wait.</p>');
            fetch(`/instances/${instanceId}/sources/${loaderId}`, { method: 'DELETE' })
                .then(() => {
                    $('#res').html('<p>Source deleted successfully.</p>');
                    sourcesTable.ajax.reload();
                    setTimeout(() => $('#res').html(''), 5000);
                })
                .catch(error => {
                    $('#res').html(`<p>Error deleting source: ${error.message}</p>`);
                    setTimeout(() => $('#res').html(''), 5000);
                });
        }

        function reloadSource(loaderId, instanceId, sourcesTable) {
            $('#res').html('<p>Reloading source, please wait...</p>');
            fetch(`/instances/${instanceId}/sources/${loaderId}`)
                .then(response => response.json())
                .then(metadata => {
                    $('#res').html('<p>Deleting existing record before reload...</p>');
                    return fetch(`/instances/${instanceId}/sources/${loaderId}`, { method: 'DELETE' })
                        .then(() => {
                            $('#res').html('<p>Reloading source, please wait...</p>');
                            return fetch(`/instances/${instanceId}/sources`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(metadata.loader)
                            });
                        });
                })
                .then(() => {
                    $('#res').html('<p>Source reloaded successfully.</p>');
                    sourcesTable.ajax.reload();
                    setTimeout(() => $('#res').html(''), 5000);
                })
                .catch(error => {
                    $('#res').html(`<p>Error reloading source: ${error.message}</p>`);
                    setTimeout(() => $('#res').html(''), 5000);
                });
        }
    </script>
<%- include('../../partials/footer') %>